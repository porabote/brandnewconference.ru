import React from 'react';
import { connect } from 'react-redux';
import { Api } from '@services';
import { Form, Field, Textarea, InputBare, Button } from 'porabote/form';
import PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';
import PeopleIcon from '@material-ui/icons/People';
import MenuOutlinedIcon from '@material-ui/icons/MenuOutlined';
import ObserversByRecord from '@components/observers/observers-by-record'
import MailOutlineOutlinedIcon from '@material-ui/icons/MailOutlineOutlined';
import AlternateEmailOutlinedIcon from '@material-ui/icons/AlternateEmailOutlined';
import FormatBoldIcon from '@material-ui/icons/FormatBold';
import FormatItalicIcon from '@material-ui/icons/FormatItalic';
import ShortTextIcon from '@material-ui/icons/ShortText';
import FormatClearIcon from '@material-ui/icons/FormatClear';
import FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';

class CommentForm extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            textariaId: Math.random(),
            isSubmitReady: true,
            txtHeight: '110',
            auth: this.props.auth,
            values: {
                record_id: this.props.recordId,
                class_name: this.props.modelAlias,
                msg: '',
                name: this.props.auth.user.name
            }
        }

        this.textaria = React.createRef();
    }

    sendComment = (formContext) => {

        this.setState({
            isSubmitReady: true
        })

        const values = {
            ...formContext.values,
            msg: this.textaria.current.innerHTML
        }

        formContext.setFieldValue("msg", "");
        this.textaria.current.innerHTML = "";

        return values;
    }

    editText = (tag, textariaId) => {
        const el = document.getElementById(textariaId);

        var selection = window.getSelection();
        if (selection && selection.rangeCount === 0) return;

        selection = selection.getRangeAt(0);

        var selectedText = selection.extractContents();
        var tagElement = document.createElement(tag);
        tagElement.appendChild(selectedText);
        selection.insertNode(tagElement);
    }

    clearText = (textariaId) => {
        const el = document.getElementById(textariaId);

        var selection = window.getSelection();
        if (selection && selection.rangeCount === 0) return;

        // According to mouse movemenet
        // const posStart = (selection.focusOffset < selection.baseOffset) ? selection.focusOffset : selection.baseOffset;
        // const selLength = (selection.focusOffset < selection.baseOffset) ?
        //   selection.baseOffset - posStart : selection.focusOffset - posStart;
        let range = selection.getRangeAt(0);
        let clearText = range.toString();

        // Если котекст это текст
        if (selection.anchorNode.nodeType === 3) {

            let wholeText = range.endContainer.parentNode.textContent;

            let tag = range.endContainer.parentNode.nodeName;

            if (tag == "B" || tag == "I" || tag == "U") {

                if (clearText.length != wholeText.length) {

                    range.deleteContents();
                    range.insertNode(document.createTextNode("|"));
                    const textT = range.endContainer.textContent;

                    const textParts = textT.split("|");

                    if (range.commonAncestorContainer.nodeName == tag) {
                        range.endContainer.remove();

                        if (textParts[1].length > 0) {
                            let tagElement = document.createElement(tag);
                            tagElement.appendChild(document.createTextNode(textParts[1]));
                            range.insertNode(tagElement);
                        }
                        range.insertNode(document.createTextNode(clearText));
                        if (textParts[0].length > 0) {
                            let tagElement = document.createElement(tag);
                            tagElement.appendChild(document.createTextNode(textParts[0]));
                            range.insertNode(tagElement);
                        }
                    } else {
                        range.deleteContents();
                        range.insertNode(document.createTextNode(clearText));
                    }

                } else {
                    range.endContainer.parentNode.remove();
                    range.insertNode(document.createTextNode(wholeText));
                }

            } else {
                range.deleteContents();
                range.insertNode(document.createTextNode(clearText));
            }

        } else {
            range.deleteContents();
            range.insertNode(document.createTextNode(clearText));
        }

    }

    render() {

        const { values } = this.state
        let addUrl = this.props.addUrl || '/api/comments/add/';
        const textariaId = Math.random();

        return(
          <Form
            action={addUrl}
            values={values}
            beforeSubmit={this.sendComment}
            submitFormAfter={(response, formContext) => {
                this.setState({
                    isSubmitReady: true
                })

                formContext.setFieldValue('msg', '')
                this.props.fetchRecord()

            }}
          >
              <div className="comments__form">

                  <div className="comments__form__input-couple__wrap">

                      <label className="comments__form__input-couple__item__label first">
                          <Field>
                              <InputBare
                                name="name"
                                readOnly=""
                                placeholder="Ваше имя"
                                className="comments__form__input-couple__item first"
                              />
                          </Field>
                      </label>
                      <div style={{
                          padding: '10px 0 0px 0',
                          borderBottom: '1px solid #E9E9E9'
                      }}>
                          <button type="button" onClick={() => { this.editText("b", this.state.textariaId); }}>
                              <FormatBoldIcon style={{color: "#2b2c2d", fontSize: "22px"}} />
                          </button>
                          <button type="button" onClick={() => { this.editText("i", this.state.textariaId); }}>
                              <FormatItalicIcon style={{color: "#2b2c2d", fontSize: "22px"}} />
                          </button>
                          <button type="button" onClick={() => { this.editText("u", this.state.textariaId); }}>
                              <FormatUnderlinedIcon style={{color: "#2b2c2d", fontSize: "22px"}} />
                          </button>
                          <button type="button" onClick={() => { this.clearText(this.state.textariaId); }}>
                              <FormatClearIcon title="Очистить стили" style={{color: "#2b2c2d", fontSize: "22px"}} />
                          </button>
                      </div>
                      <label
                        className="comments__form__input-couple__textarea__label"
                        style={{height: `${this.state.txtHeight}px`}}
                      >

                          <div
                            ref={this.textaria}
                            contentEditable={true}
                            suppressContentEditableWarning={true}
                            id={this.state.textariaId}
                            name="msg"
                            placeholder="Напишите ваш комментарий"
                            className="comments__form__input-couple__item div"
                            onInput={(e) => {
                                this.setState({
                                    values: {
                                        ...values,
                                        msg: e.target.innerHTML
                                    }
                                })
                            }}
                          >
                          </div>

                      </label>

                  </div>


                  <div className="comments__form__button-panel">

                      <Field>
                          <Button
                            type="submit"
                            disabled={this.state.isSubmitReady ? false : true}
                            className="comments__form__button-panel__button send"
                            onClick={(e) => {

                                e.preventDefault();

                                this.setState({
                                    isSubmitReady: false
                                })
                            }}
                          >
                              Отправить
                          </Button>
                      </Field>
                      <AlternateEmailOutlinedIcon
                        className="link_with_icon grey"
                        style={{
                            marginRight: '6px',
                        }}
                        onClick={(e) => {
                            this.props.openObserversList(
                              this.props.recordId,
                              this.props.businessEventIds,
                              this.props.auth.state,
                            );
                        }}
                      />
                  </div>
              </div>
          </Form>
        )
    }
}

const mapStateToProps = (state) => {
    return ({
        auth: state.auth,
    })
}

const mapDispatchToProps = (dispatch) => {
    return {
        openObserversList: (recordId, businessEventIds, auth) => dispatch({
            type: 'PUSH_MODAL_ITEM',
            payload: {
                title: `Список оповещений`,
                content: React.createElement(ObserversByRecord, {
                    recordId,
                    businessEventIds,
                    auth
                })
            }
        }),
    }
}
export default connect(mapStateToProps, mapDispatchToProps)(CommentForm)