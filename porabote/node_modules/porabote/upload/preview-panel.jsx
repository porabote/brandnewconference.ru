import React from "react";
import {Form, Field, Input, InputHidden, SubmitButton, Button} from "porabote/form";
import Table, {Row, Cell} from "porabote/table";
import FileDownloadDoneRoundedIcon from '@mui/icons-material/FileDownloadDoneRounded';
import RemoveCircleOutlineRoundedIcon from '@mui/icons-material/RemoveCircleOutlineRounded';

const PreviewPanel = (props) => {

  const allowExtensions = {
    // images
    'image/png': 'png',
    'image/jpeg': 'jpe',
    'image/jpeg': 'jpeg',
    'image/jpeg': 'jpg',
    'image/gif': 'gif',
    'image/bmp': 'bmp',
    'image/vnd.microsoft.icon': 'ico',
    'image/tiff': 'tiff',
    'image/tiff': 'tif',
    'image/svg+xml': 'svg',
    'image/svg+xml': 'svgz',
    // archives
    'application/zip': 'zip',
    'application/x-rar-compressed': 'rar',
    // audio/video
    'audio/mpeg': 'mp3',
    'video/quicktime': 'qt',
    'video/quicktime': 'mov',
    // adobe
    'application/pdf': 'pdf',
    'image/vnd.adobe.photoshop': 'psd',
    'application/postscript': 'ai',
    'application/postscript': 'eps',
    // ms office
    'application/msword': 'doc',
    'application/msword': 'dot',
    'application/rtf': 'rtf',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.template': 'dotx',
    'application/vnd.ms-word.document.macroEnabled.12': 'docm',
    'application/vnd.ms-word.template.macroEnabled.12': 'dotm',
    'application/vnd.ms-excel': 'xls',
    'application/vnd.ms-excel': 'xlt',
    'application/vnd.ms-excel': 'xla',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xlsx',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.template': 'xltx',
    'application/vnd.ms-excel.sheet.macroEnabled.12': 'xlsm',
    'application/vnd.ms-excel.template.macroEnabled.12': 'xltm',
    'application/vnd.ms-excel.addin.macroEnabled.12': 'xlam',
    'application/vnd.ms-excel.sheet.binary.macroEnabled.12': 'xlsb',
    'application/vnd.ms-powerpoint': 'ppt',
    'application/vnd.ms-powerpoint': 'pot',
    'application/vnd.ms-powerpoint': 'pps',
    'application/vnd.ms-powerpoint': 'ppa',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'pptx',
    'application/vnd.openxmlformats-officedocument.presentationml.template': 'potx',
    'application/vnd.openxmlformats-officedocument.presentationml.slideshow': 'ppsx',
    'application/vnd.ms-powerpoint.addin.macroEnabled.12': 'ppam',
    'application/vnd.ms-powerpoint.presentation.macroEnabled.12': 'pptm',
    'application/vnd.ms-powerpoint.template.macroEnabled.12': 'potm',
    'application/vnd.ms-powerpoint.slideshow.macroEnabled.12': 'ppsm',
    'application/vnd.ms-access': 'mdb',
    'text/csv': 'csv',
    // open office
    'application/vnd.oasis.opendocument.text': 'odt',
    'application/vnd.oasis.opendocument.spreadsheet': 'ods',
    // Mac OS
    'text/rtf': 'rtf'
  }

  const getPreviewImg = (file, index) => {

    let href = URL.createObjectURL(file)
    let typeSplits = file.type.split('/');

    if (typeSplits[0] == 'image') {
      return (
        <div key={index} className="preview-panel-file-cover" style={{
          backgroundImage: `url(${href})`,
        }}></div>
      )
    } else {

      if (typeof allowExtensions[file.type] == "undefined") {
        alert('Один из выбранных файлов имеет недопустимое разрешение.');
        return;
      }

      return (
        <div key={index} className="preview-panel-file-cover">
          <TextSnippetIcon style={{fontSize: '20px'}}/>
          .{allowExtensions[file.type]}
        </div>
      )
    }
  }

  if (!props.files.length) return <div></div>;

  let isIssetExtraFields = (typeof props.setDataFields == "function") ? true : false;

  return (
    <div className="preview-panel">

      <h3 style={{padding: '20px 0'}}>Загружаемые файлы</h3>
      <Table border={true} grid-template-columns="minmax(200px, 1fr) 200px 200px 1fr 50px">
        <Row className="head">
          <Cell>Название</Cell>
          <Cell>Размер</Cell>
          <Cell>Тип</Cell>
          {isIssetExtraFields && <Cell>Данные</Cell>}
          <Cell></Cell>
        </Row>
        {props.files.map((file, index) => {

          let extraFields = (isIssetExtraFields) ? props.setDataFields(file, index) : '';

          return (
            <Row key={index}>
              <Cell><FileDownloadDoneRoundedIcon className="preview-panel__file-icon"/><b>{file.name}</b></Cell>
              <Cell>{`${Math.round(file.size / 1024)}`} KB</Cell>
              <Cell>Тип</Cell>
              {isIssetExtraFields && <Cell>{extraFields}</Cell>}
              <Cell className="preview-panel__cell-delete">
                <RemoveCircleOutlineRoundedIcon className="preview-panel__delete-icon"/>
              </Cell>
            </Row>
          );
        })}
      </Table>
      <SubmitButton>
        <Button
          text="Сохранить файлы"
          className="upload-panel_submit-button"
          type="button"
          style={{width: '140px', marginTop: '20px'}}
        />
      </SubmitButton>
    </div>
  );
}

export default PreviewPanel;